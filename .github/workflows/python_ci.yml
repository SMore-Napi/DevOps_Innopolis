name: Python CI

on: [ push, pull_request ]

jobs:

  changes:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    outputs:
      app_python: ${{ steps.filter.outputs.app_python }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app_python:
              - 'app_python/**'

  build:
    needs: [ changes ]
    if: ${{ needs.changes.outputs.app_python == 'true' }}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.8", "3.9", "3.10" ]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/app_python/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          if [ -f app_python/requirements.txt ]; then pip install -r app_python/requirements.txt; fi

      - name: Analysing the code with pylint
        run: |
          pylint $(git ls-files '*.py')

      - name: Test with unittest
        run: |
          cd app_python
          python -m unittest discover tests

  security:
    if: ${{ needs.changes.outputs.app_python == 'true' }}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@master

      - uses: snyk/actions/setup@master

      - name: Run Snyk to check for vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          pip install -r app_python/requirements.txt
          cd app_python
          snyk test --sarif-file-output=result.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: app_python/result.sarif

  publish-image:
    if: ${{ needs.changes.outputs.app_python == 'true' }}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: [ security ]
    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: app_python
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/app_python:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/app_python:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/app_python:buildcache,mode=max
